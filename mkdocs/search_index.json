{
    "docs": [
        {
            "location": "/0/", 
            "text": "howto_co34pt_liveCode\n\n\nA repository of readmes, techniques, notes and other materials about how i live code in SuperCollider. A (sorta) companion repository to co34pt_livecode \n\n\nThis repository is in heavy development (as of February 2017), and will be changing a lot in the coming weeks/months\n\n\nCONTENTS\n\n\n\n\nIntroduction\n\n\nWhat this repo is\n\n\nWhy I Live code\n\n\nWhy I use SuperCollider \n\n\n\n\n\n\nBasics\n\n\nMy Recommeded Addons\n\n\nProxyspace - My foundation for live coding in SuperCollider\n\n\nSetup code - Making Performance Easier", 
            "title": "Readme"
        }, 
        {
            "location": "/0/#howto_co34pt_livecode", 
            "text": "A repository of readmes, techniques, notes and other materials about how i live code in SuperCollider. A (sorta) companion repository to co34pt_livecode   This repository is in heavy development (as of February 2017), and will be changing a lot in the coming weeks/months", 
            "title": "howto_co34pt_liveCode"
        }, 
        {
            "location": "/0/#contents", 
            "text": "Introduction  What this repo is  Why I Live code  Why I use SuperCollider     Basics  My Recommeded Addons  Proxyspace - My foundation for live coding in SuperCollider  Setup code - Making Performance Easier", 
            "title": "CONTENTS"
        }, 
        {
            "location": "/0-1/", 
            "text": "A list of techniques, subjects, etc I haven't yet covered\n\n\n\n\n\n\nWhy Live Coding? (Covered in an earlier text I haven't published yet) x\n\n\nCopyleft samples i'm using and who I need to attribute \n\n\nPbinds\n\n\nHow I use Pbinds\n\n\nThe SynthDefs I use inside of Pbinds (bplay, henon etc)\n\n\n\n\n\n\nGood SynthDef writing practice for co34pt_livecode\n\n\nPbinds on Pbinds, Why I find Pdefs a bit bulky, Also Tdefs\n\n\nPbinds straight onto proxyspace\n\n\nPbinds alongside static synths\n\n\nA set of my favourite pattern classes\n\n\nPkr and synchronising values outside of patterns\n\n\nPbinds and melodic/pitch arrangement\n\n\nSimple scales\n\n\n\n\n\n\nNot so simple scales (53 note ET as a way to smear pitch)\n\n\nHarmonic series and modulating harmonic series\n\n\nOperating between pitch and noise (henon, sinoscFB)\n\n\n\n\n\n\nRhythm\n\n\nHow to do rhythm, and why I found it so hard\n\n\n\n\n\n\nStatic synths\n\n\nChaning static synths\n\n\nFeedback\n\n\nSuperCollider as a live-codable modular synth that doesn't cost \u00a3\u00a3\u00a3\n\n\n\n\n\n\nEuclidean Rhythms and the Bjorklund quark\n\n\nEuclidean 3 vs straight 4/4 kick\n\n\nFootworking with offsets\n\n\nConstrained randomness and euclidean rhythms\n\n\nEasy Convergence/Divergence using a common value set\n\n\nEuclidean rhythms for percussion\n\n\nEuclidean rhythms for Melody\n\n\n\n\n\n\nStageLimiter, and StageLimiter abuse\n\n\nChaos synths\n\n\nI have \nno\n idea how they work but they sound good\n\n\nMy use of Henon and constrained randomness\n\n\n\n\n\n\nVisuals\n\n\nDropping the scope behind the IDE on linux = instant visuals. Don't know how to do it on any other platform \u00af_(\u30c4)_/\u00af", 
            "title": "To-Do list"
        }, 
        {
            "location": "/0-1/#a-list-of-techniques-subjects-etc-i-havent-yet-covered", 
            "text": "Why Live Coding? (Covered in an earlier text I haven't published yet) x  Copyleft samples i'm using and who I need to attribute   Pbinds  How I use Pbinds  The SynthDefs I use inside of Pbinds (bplay, henon etc)    Good SynthDef writing practice for co34pt_livecode  Pbinds on Pbinds, Why I find Pdefs a bit bulky, Also Tdefs  Pbinds straight onto proxyspace  Pbinds alongside static synths  A set of my favourite pattern classes  Pkr and synchronising values outside of patterns  Pbinds and melodic/pitch arrangement  Simple scales    Not so simple scales (53 note ET as a way to smear pitch)  Harmonic series and modulating harmonic series  Operating between pitch and noise (henon, sinoscFB)    Rhythm  How to do rhythm, and why I found it so hard    Static synths  Chaning static synths  Feedback  SuperCollider as a live-codable modular synth that doesn't cost \u00a3\u00a3\u00a3    Euclidean Rhythms and the Bjorklund quark  Euclidean 3 vs straight 4/4 kick  Footworking with offsets  Constrained randomness and euclidean rhythms  Easy Convergence/Divergence using a common value set  Euclidean rhythms for percussion  Euclidean rhythms for Melody    StageLimiter, and StageLimiter abuse  Chaos synths  I have  no  idea how they work but they sound good  My use of Henon and constrained randomness    Visuals  Dropping the scope behind the IDE on linux = instant visuals. Don't know how to do it on any other platform \u00af_(\u30c4)_/\u00af", 
            "title": "A list of techniques, subjects, etc I haven't yet covered"
        }, 
        {
            "location": "/1-1/", 
            "text": "What This Repo Is\n\n\nTODO: Proofread this, sentence structure etc.\n\n\n\n\nHello!\n\n\nI live code under the name co\u00ef\u00bf\u00a5\u00ef\u00be\u00a1pt (\nbandcamp\n, \nsoundcloud\n), and have been performing since 2014, including for \nAlgoraves\n, \ngigs\n, \ntheatre\n and \ndance\n.\n\n\nThis repo is an ongoing collection of materials about my live coding practice using SuperCollider. I'm hoping to use it to post writing, how-tos and guides, helpful code, techniques, frameworks and whatever else might be useful to anyone wanting to learn to live code using SuperCollider, or anyone who already does. It's a clone/version of and companion to my co34pt_livecode repo, which contains finished sets from gigs alongside my setup code and samples.\n\n\nI'm putting together this repo because I wish there'd been such a thing when I had been learning to live code in SuperCollider, (or at least I wish there'd been one i'd been able to find). There are a bunch of great tutorials for SuperCollider out there (I'd particularly recommend this set by \nEli Fieldsteel\n), but I found advice on live coding in SuperCollider reasonably hard to come by, and was fortunate enough to have an experienced live coder as a teacher. An awful lot of the examples I give and techniques I talk about can be found in the documentation of SuperCollider, but finding it can be a little frustrating and examples can often be written in quite different styles. I'm aiming for this repo to be a curated set of resources following a central style, with various parts of the language explained in the context of the kind of live coding I do, with musical examples of how I would use these techniques in actual live sets.\n\n\nFor the resources here i'm assuming a basic knowledge of how to use SuperCollider and programming concepts generally, because i'm not a great person to explain this. If you're totally new to SuperCollider and programming i'd either recommend the Eli Fieldsteel videos previously mentioned, Supercollider's \ninbuilt turotials\n, or \nNick Collins's\n tutorials. The more advanced tutorials won't be necessary for the most part, but a familiarity with executing SuperCollider code, what UGens are and basic syntax will be super helpful.\n\n\nThe materials in this repo are by no means the \nbest\n way to live code using SuperCollider, or the most efficient way to solve any problems, but they are the ways that have worked for me personally. If you spot any glaring issues in this repo, please fork and change/correct! I'd also welcome guest contributions, although I maybe should rename this repo if i'm going to do that so as not to have it under my 'umbrella' name.\n\n\nI'm also continually looking for a better way to manage this repo as a learning resource. I've figured GitHub is probably the best way to do it as there is version control, all resources can be hosted here along with details on how to use them, and it can easily be packaged and downloaded, the only thing missing being a 'comments' section. \n\n\nIf you want to get in touch with me about this repo, please do so on Github, Twitter (same username) or via theseancotterill atsymbol live period com.\n\n\nA note about formats: The examples and code in this repo will be tested using Linux, in my case Kubuntu 16.04+, but as SuperCollider is cross-platform this shouldn't matter too much for the most part.", 
            "title": "What this Repo Is"
        }, 
        {
            "location": "/1-1/#what-this-repo-is", 
            "text": "TODO: Proofread this, sentence structure etc.   Hello!  I live code under the name co\u00ef\u00bf\u00a5\u00ef\u00be\u00a1pt ( bandcamp ,  soundcloud ), and have been performing since 2014, including for  Algoraves ,  gigs ,  theatre  and  dance .  This repo is an ongoing collection of materials about my live coding practice using SuperCollider. I'm hoping to use it to post writing, how-tos and guides, helpful code, techniques, frameworks and whatever else might be useful to anyone wanting to learn to live code using SuperCollider, or anyone who already does. It's a clone/version of and companion to my co34pt_livecode repo, which contains finished sets from gigs alongside my setup code and samples.  I'm putting together this repo because I wish there'd been such a thing when I had been learning to live code in SuperCollider, (or at least I wish there'd been one i'd been able to find). There are a bunch of great tutorials for SuperCollider out there (I'd particularly recommend this set by  Eli Fieldsteel ), but I found advice on live coding in SuperCollider reasonably hard to come by, and was fortunate enough to have an experienced live coder as a teacher. An awful lot of the examples I give and techniques I talk about can be found in the documentation of SuperCollider, but finding it can be a little frustrating and examples can often be written in quite different styles. I'm aiming for this repo to be a curated set of resources following a central style, with various parts of the language explained in the context of the kind of live coding I do, with musical examples of how I would use these techniques in actual live sets.  For the resources here i'm assuming a basic knowledge of how to use SuperCollider and programming concepts generally, because i'm not a great person to explain this. If you're totally new to SuperCollider and programming i'd either recommend the Eli Fieldsteel videos previously mentioned, Supercollider's  inbuilt turotials , or  Nick Collins's  tutorials. The more advanced tutorials won't be necessary for the most part, but a familiarity with executing SuperCollider code, what UGens are and basic syntax will be super helpful.  The materials in this repo are by no means the  best  way to live code using SuperCollider, or the most efficient way to solve any problems, but they are the ways that have worked for me personally. If you spot any glaring issues in this repo, please fork and change/correct! I'd also welcome guest contributions, although I maybe should rename this repo if i'm going to do that so as not to have it under my 'umbrella' name.  I'm also continually looking for a better way to manage this repo as a learning resource. I've figured GitHub is probably the best way to do it as there is version control, all resources can be hosted here along with details on how to use them, and it can easily be packaged and downloaded, the only thing missing being a 'comments' section.   If you want to get in touch with me about this repo, please do so on Github, Twitter (same username) or via theseancotterill atsymbol live period com.  A note about formats: The examples and code in this repo will be tested using Linux, in my case Kubuntu 16.04+, but as SuperCollider is cross-platform this shouldn't matter too much for the most part.", 
            "title": "What This Repo Is"
        }, 
        {
            "location": "/1-3/", 
            "text": "Why SuperCollider?\n\n\nTODO: Proofread, check sentences/general syntax\n\n\n\n\n'You're brave to use SuperCollider!'\n - Anonymous, after a performance of mine, also probably slightly misremembered\n\n\nLooking at lvm's \nawesome-livecoding\n list, there are currently a whole bunch of live coding languages and platforms built around a whole bunch of paradigms, suited to many different users with varying aims, mediums, skillsets and abilities.\n\n\nSuperCollider sits on the back-end of a few live coding-specific languages, including \nFoxDot\n, \nTidalCycles\n (with \nSuperDirt\n), \nOvertone\n, \nixi lang\n and probably some I've forgotten, but within SuperCollider there is ample support for live coding in the form of various libraries and techniques (I use \nJITLib\n), and I've been using it since 2014 for \nperformances\n, \ncomposition\n and for building \nother projects\n.\n\n\nI've tried (and performed with) a bunch of other live coding platforms (mostly \nTidalCycles\n and \nFoxDot\n), and have repeatedly settled on SuperCollider over and over for live coding. As someone mostly performing metre-driven beat-based dance music, this can seem like an odd choice. Tidalcycles, for example, is specifically built around rhythmic cycles, and is a terse and efficient way to create rhythmic units. \n\n\nSuperCollider on the other hand has no one central method to produce rhythmic patterns or loops - instead there are a number of different ways to leverage \npattern classes\n, some of which are really quite unwieldy and not at all suited to live coding and rely on a lot of pretty complicated nesting. SuperCollider is also \nreally\n verbose - when creating patterns basic arguments need to be manually specified, which requires a lot of typing. In addition to this, SuperCollider has no real 'built-in' mechanisms for live performance - these often have to be built by the user and imported as libraries. This repo contains a number of \nSynthDefs\n, or 'instruments' that I have had to build myself or copy from elsewhere in order to perform basic functions within patterns - want to play a kickdrum sample? Better build a way to do that yourself! Want a square wave you can trigger as part of a pattern? Better go write that synth! It's also full of strange \nundocumented methods and classes\n, which can hold keys to performance techniques that I'll never find because I don't know what they are - I had to catch someone using the method \n.stutter\n during a live set to figure out its potential uses for me. People who live code in SuperCollider also often do it very differently from each other, using different, sometimes not transferable sets of techniques - this is a result of SuperCollider being a comparatively enormous language, but sometimes results in problems learning, especially for a musician who hadn't been coding very long (myself, when I first learned SuperCollider).\n\n\nSuperCollider can also be pretty unforgiving. With no built-in limiter, one incorrect argument can be absolutely devastating - The main perceptual difference between \n{SinOsc.ar(400,0,1)}.play;\n and \n{SinOsc.ar(400,0,10)}.play;\n, is pain. Especially when you're wearing headphones.\n\n\nThe results of this? \n\n\nFrom absolutely nothing, in TidalCycles\n\n\nd1 $ sound \nbd sn\n\n\n\n\n\nproduces a kick-snare pattern, which can very easily be extended to \n\n\nd1 $ sound \nbd sn cp\n\n\n\n\n\nto produce a kick-snare-clap pattern. \n\n\nIn SuperCollider however, producing a kick-snare pattern can take a number of forms, but this is how I would end up doing it from boot-up (without any of the boilerplate code in this repo).\n\n\na = Buffer.read(s,\n/path/to/kick/kick.wav\n);\nb = Buffer.read(s,\n/path/to/snare/snare.wav\n);\nSynthDef(\\bplay,\n    {arg out = 0, buf = 0, rate = 1, amp = 0.5, pan = 0, pos = 0, rel=15;\n    var sig,env ;\n    sig = Pan2.ar(PlayBuf.ar(2,buf,BufRateScale.ir(buf) * rate,1,BufDur.kr(buf)*pos*44100,doneAction:2),pan);\n    env = EnvGen.ar(Env.linen(0.0,rel,0),doneAction:2);\n    sig = sig * env;\n    sig = sig * amp;\n    Out.ar(out,sig);\n    }).add;\np = ProxySpace.push(s);\np.makeTempoClock;\n~k = Pbind(\\instrument,\\bplay,\\buf,a,\\dur,0.5,\\amp,1);\n~s = Pbind(\\instrument,\\bplay,\\buf,b,\\dur,1,\\amp,1);\n~k.play;\n~s.play;\n\n\n\n\nAnd in order to do the kick-snare-clap pattern I would have to add\n\n\nc = Buffer.read(s,\n/path/to/clap/clap.wav\n);\n~k = Pbind(\\instrument,\\bplay,\\buf,a,\\dur,1/3,\\amp,1);\n~s = Pbind(\\instrument,\\bplay,\\buf,b,\\dur,1/3,\\amp,1);\n~c = Pbind(\\instrument,\\bplay,\\buf,c,\\dur,1/3,\\amp,1);\n~c.play;\n\n\n\n\nSo \nwhy\n would I choose to use a system like this, when there are some that are much more efficient for the kinds of things I am doing? (I am being a little obtuse in the code example above for the sake of argument)\n\n\nThe answer is primarily, of course, \nbecause it works for me\n, but here's why.\n\n\nSuperCollider is a huge language, containing not only a really great set of pattern libraries and live coding functionality, but some of the best synthesis capabilities of any program I have ever used, and with extensions, the possible functionality I can draw upon is absolutely enormous. In this repo I'll be talking about how I use \nEuclidean Rhythms\n, \nNonlinear Maps\n, \nCommon fundamental frequencies\n and \n53 tone scales\n, and many other techniques to make parts of music. SuperCollider's amazing array of native and extended functionality is not immediately usable for live coding from the time of installation, but with some reusable scaffolding in place, these features can be relatively easily leveraged. The issue of the verbosity of SuperCollider compared to Tidalcycles is in 'boilerplate' code and extensions - it's taken me a while to build and work with structures to make using SuperCollider as a performer more effective, but once the framework is in place things get much easier, and can be tuned to my liking.\n\n\nThe lack of pre-built foundations is also liberating in some respects because if I want to get down to a 'lower level' during a performance it's trivial to do so. If I am hitting a wall during a performance of some heavy beats, the same library that allows me to change high-level pattern structures on the fly will also allow me to start multiplying bare sine waves and performing brutal additive synthesis and arrhythmical pulsing filtered white noise live alongside these patterns. The code shown earlier of a kick, snare and clap all being run as separate \nproxies\n is how I usually do my live coding (with one 'sound' or 'instrument' per proxy), and while this seems very text-heavy and verbose at first, it allows me to create a number of small, relatively self-governing processes which will run of their own accord, often varying slightly based on algorithmic or random transformation, until I change them. Through this method, my performances usually involve building up musical textures and patterns through allowing each 'instrument' a small amount of its own variability - together each small amount of variability comes together to form a kind of emergent complexity, the complex sum of all of its (relatively) simple parts. Through the performance I'll then manage these units, building new ones as old ones become fatiguing, and injecting new life into stalwart units (such as kick drums) by modifying their patterns/pitch/effects/etc. I like to think of this performance setup as a kind of ecology of small units being constructed, managed, decommissioned, revamped and destroyed throughout a performance.\n\n\nThis kind of 'ecological' approach means that once the basis of a 'sound' during a performance are established (say hi-hat pattern, kick and two melody lines) I can spend some time building the next set of sounds, while the other sounds manage themselves and stay sonically interesting through some well-placed randomness - I can have some breathing room. The verbosity of the pattern language also helps in some respects too, having to type the names of individual parameters means I am forced to consider the nature of the sound I'm about to throw into the mix while I'm typing it. This is one of the reasons why I don't think I got on with Tidalcycles when I tried to perform solo with it - it's powerful enough to change the entire dynamic of a performance using a few characters, and I'm not responsible enough to wield that power.\n\n\nMy biggest gripe with SuperCollider is the pretty verbose Pattern syntax, as patterns are a huge part of my live performances. I think the pattern classes in SuperCollider are very powerful, but a lot of typing \ndoes\n need to be done. Fortunately the \nddwSnippets\n quark has finally arrived, delivering some snippets to the SuperCollider IDE! Before that, I would keep a bunch of 'default' patterns on hand in another document during performance to copy-paste and change. I've also heard that \nscvim\n is currently in active development, and as a vim user I'd love to integrate it as my SuperCollider editor.", 
            "title": "Why SuperCollider?"
        }, 
        {
            "location": "/1-3/#why-supercollider", 
            "text": "TODO: Proofread, check sentences/general syntax   'You're brave to use SuperCollider!'  - Anonymous, after a performance of mine, also probably slightly misremembered  Looking at lvm's  awesome-livecoding  list, there are currently a whole bunch of live coding languages and platforms built around a whole bunch of paradigms, suited to many different users with varying aims, mediums, skillsets and abilities.  SuperCollider sits on the back-end of a few live coding-specific languages, including  FoxDot ,  TidalCycles  (with  SuperDirt ),  Overtone ,  ixi lang  and probably some I've forgotten, but within SuperCollider there is ample support for live coding in the form of various libraries and techniques (I use  JITLib ), and I've been using it since 2014 for  performances ,  composition  and for building  other projects .  I've tried (and performed with) a bunch of other live coding platforms (mostly  TidalCycles  and  FoxDot ), and have repeatedly settled on SuperCollider over and over for live coding. As someone mostly performing metre-driven beat-based dance music, this can seem like an odd choice. Tidalcycles, for example, is specifically built around rhythmic cycles, and is a terse and efficient way to create rhythmic units.   SuperCollider on the other hand has no one central method to produce rhythmic patterns or loops - instead there are a number of different ways to leverage  pattern classes , some of which are really quite unwieldy and not at all suited to live coding and rely on a lot of pretty complicated nesting. SuperCollider is also  really  verbose - when creating patterns basic arguments need to be manually specified, which requires a lot of typing. In addition to this, SuperCollider has no real 'built-in' mechanisms for live performance - these often have to be built by the user and imported as libraries. This repo contains a number of  SynthDefs , or 'instruments' that I have had to build myself or copy from elsewhere in order to perform basic functions within patterns - want to play a kickdrum sample? Better build a way to do that yourself! Want a square wave you can trigger as part of a pattern? Better go write that synth! It's also full of strange  undocumented methods and classes , which can hold keys to performance techniques that I'll never find because I don't know what they are - I had to catch someone using the method  .stutter  during a live set to figure out its potential uses for me. People who live code in SuperCollider also often do it very differently from each other, using different, sometimes not transferable sets of techniques - this is a result of SuperCollider being a comparatively enormous language, but sometimes results in problems learning, especially for a musician who hadn't been coding very long (myself, when I first learned SuperCollider).  SuperCollider can also be pretty unforgiving. With no built-in limiter, one incorrect argument can be absolutely devastating - The main perceptual difference between  {SinOsc.ar(400,0,1)}.play;  and  {SinOsc.ar(400,0,10)}.play; , is pain. Especially when you're wearing headphones.  The results of this?   From absolutely nothing, in TidalCycles  d1 $ sound  bd sn   produces a kick-snare pattern, which can very easily be extended to   d1 $ sound  bd sn cp   to produce a kick-snare-clap pattern.   In SuperCollider however, producing a kick-snare pattern can take a number of forms, but this is how I would end up doing it from boot-up (without any of the boilerplate code in this repo).  a = Buffer.read(s, /path/to/kick/kick.wav );\nb = Buffer.read(s, /path/to/snare/snare.wav );\nSynthDef(\\bplay,\n    {arg out = 0, buf = 0, rate = 1, amp = 0.5, pan = 0, pos = 0, rel=15;\n    var sig,env ;\n    sig = Pan2.ar(PlayBuf.ar(2,buf,BufRateScale.ir(buf) * rate,1,BufDur.kr(buf)*pos*44100,doneAction:2),pan);\n    env = EnvGen.ar(Env.linen(0.0,rel,0),doneAction:2);\n    sig = sig * env;\n    sig = sig * amp;\n    Out.ar(out,sig);\n    }).add;\np = ProxySpace.push(s);\np.makeTempoClock;\n~k = Pbind(\\instrument,\\bplay,\\buf,a,\\dur,0.5,\\amp,1);\n~s = Pbind(\\instrument,\\bplay,\\buf,b,\\dur,1,\\amp,1);\n~k.play;\n~s.play;  And in order to do the kick-snare-clap pattern I would have to add  c = Buffer.read(s, /path/to/clap/clap.wav );\n~k = Pbind(\\instrument,\\bplay,\\buf,a,\\dur,1/3,\\amp,1);\n~s = Pbind(\\instrument,\\bplay,\\buf,b,\\dur,1/3,\\amp,1);\n~c = Pbind(\\instrument,\\bplay,\\buf,c,\\dur,1/3,\\amp,1);\n~c.play;  So  why  would I choose to use a system like this, when there are some that are much more efficient for the kinds of things I am doing? (I am being a little obtuse in the code example above for the sake of argument)  The answer is primarily, of course,  because it works for me , but here's why.  SuperCollider is a huge language, containing not only a really great set of pattern libraries and live coding functionality, but some of the best synthesis capabilities of any program I have ever used, and with extensions, the possible functionality I can draw upon is absolutely enormous. In this repo I'll be talking about how I use  Euclidean Rhythms ,  Nonlinear Maps ,  Common fundamental frequencies  and  53 tone scales , and many other techniques to make parts of music. SuperCollider's amazing array of native and extended functionality is not immediately usable for live coding from the time of installation, but with some reusable scaffolding in place, these features can be relatively easily leveraged. The issue of the verbosity of SuperCollider compared to Tidalcycles is in 'boilerplate' code and extensions - it's taken me a while to build and work with structures to make using SuperCollider as a performer more effective, but once the framework is in place things get much easier, and can be tuned to my liking.  The lack of pre-built foundations is also liberating in some respects because if I want to get down to a 'lower level' during a performance it's trivial to do so. If I am hitting a wall during a performance of some heavy beats, the same library that allows me to change high-level pattern structures on the fly will also allow me to start multiplying bare sine waves and performing brutal additive synthesis and arrhythmical pulsing filtered white noise live alongside these patterns. The code shown earlier of a kick, snare and clap all being run as separate  proxies  is how I usually do my live coding (with one 'sound' or 'instrument' per proxy), and while this seems very text-heavy and verbose at first, it allows me to create a number of small, relatively self-governing processes which will run of their own accord, often varying slightly based on algorithmic or random transformation, until I change them. Through this method, my performances usually involve building up musical textures and patterns through allowing each 'instrument' a small amount of its own variability - together each small amount of variability comes together to form a kind of emergent complexity, the complex sum of all of its (relatively) simple parts. Through the performance I'll then manage these units, building new ones as old ones become fatiguing, and injecting new life into stalwart units (such as kick drums) by modifying their patterns/pitch/effects/etc. I like to think of this performance setup as a kind of ecology of small units being constructed, managed, decommissioned, revamped and destroyed throughout a performance.  This kind of 'ecological' approach means that once the basis of a 'sound' during a performance are established (say hi-hat pattern, kick and two melody lines) I can spend some time building the next set of sounds, while the other sounds manage themselves and stay sonically interesting through some well-placed randomness - I can have some breathing room. The verbosity of the pattern language also helps in some respects too, having to type the names of individual parameters means I am forced to consider the nature of the sound I'm about to throw into the mix while I'm typing it. This is one of the reasons why I don't think I got on with Tidalcycles when I tried to perform solo with it - it's powerful enough to change the entire dynamic of a performance using a few characters, and I'm not responsible enough to wield that power.  My biggest gripe with SuperCollider is the pretty verbose Pattern syntax, as patterns are a huge part of my live performances. I think the pattern classes in SuperCollider are very powerful, but a lot of typing  does  need to be done. Fortunately the  ddwSnippets  quark has finally arrived, delivering some snippets to the SuperCollider IDE! Before that, I would keep a bunch of 'default' patterns on hand in another document during performance to copy-paste and change. I've also heard that  scvim  is currently in active development, and as a vim user I'd love to integrate it as my SuperCollider editor.", 
            "title": "Why SuperCollider?"
        }, 
        {
            "location": "/2-1/", 
            "text": "SuperCollider Addons I'd recommend\n\n\nTODO: Add link to harmonic series patterns and Pkr when done\n\n\n\n\nHere is a list of Extensions and Quarks that are crucial to my live performances. If you want to be able to use all of the resources in this repo, you should install them.\n\n\nExtensions\n\n\nExtensions have to be inserted into SuperCollider manually. See \nthis\n document for more information. Note sc3-plugins have to be compiled on Linux. See the sc3-plugins readme on GitHub for more information.\n\n\nsc3-Plugins\n\n\n'This repository contains the community collection of unit generator plugins for SuperCollider. An installation extends the functionality of SuperCollider by additional UGens that run on scsynth, the SuperCollider audio synthesis server.'\n\n\nsc3-plugins is a mixed bag of tools, and contains a lot of things I don't use, but it's pretty essential for getting the most out of SuperCollider. Some of the sc3-plugins are fairly scantily-documented, and fall into the 'sounds cool, but no idea what it does or how it works' category.\n\n\nParticular tools from sc3-plugins I use regularly:\n\n\n\n\n\n\nConcat\n and \nConcat2\n\nTools for \nconcatenative synthesis\n. Particularly useful when dealing with speech and sampling - I've used them to 'reconstruct' speech using existing samples.\n\n\n\n\n\n\nDecimator\n and \nSmoothDecimator\n\n\nBitcrushing\n effect Ugens for that classic digital destruction sound. SmoothDecimator has a smoothing option to take some of the digital bite out of the bitcrushing sound.\n\n\n\n\n\n\nSawDPW\n (and \nPulseDPW\n)\nAlternatives to SuperCollider's native \nSaw\n and \nPulse\n Ugens, which alias much less, use less CPU and sound an awful lot better especially during additive synthesis. Can also get really wild at unusual frequencies.\n\n\n\n\n\n\nDFM1\n\nA really fantastic sounding digitally-modelled analog filter. Great both as a scuzzy-sounding filter on existing sounds and when pushed into self oscillation to make rich drones. Sounds good both in moderation and absurdity.\n\n\n\n\n\n\nCrossoverDistortion\n\nA savage distortion. I don't really have a lot more to say about it.\n\n\n\n\n\n\nWaveLoss\n\nAn effect for dropping sections of waveforms in either a deterministic or random fashion. Produces a 'degradation' effect from slight dropouts all the way to isolated spluttering.\n\n\n\n\n\n\nBenoitLib\n\n\nA set of SuperCollider extensions used by Beno\u00eet and the Mandelbrots.\n\n\nThe main tool I install this for is Pkr, a pattern proxy for synchronising control rate Ugens inside of patterns, which is a technique I will be covering in this repo. It's a small part of the extension but is totally invaluable for my performances.\n\n\nThere's also some super useful stuff in BenoitLib for collaborative performance which I have used before in a performance with \nShelly Knotts\n, including MandelHub and MandelClock\n\n\nQuarks\n\n\nQuarks can be installed from within SuperCollider, either by installing them manually (\nQuarks.install('BatLib')\n for example), or using \nQuarks.gui\n to bring up a gui install them there.\n\n\nBjorklund Quark\n\n\nThe Bjorklund quark implements Euclidean Rhythms, a concept outlined in \nthis paper\n, involving taking a number of onsets and a number of possible steps, and spaces out the onsets as equally as possible in the given number of steps. A verbal explanation of this doesn't really do it any justice, so I'd encourage you to use \nthis cool web app\n which visually and aurally explains what these rhythms are. I've found Euclidean rhythms a great way to program rhythm that is dynamic and interesting, but also sits well within a set of metric dance music. The class I use from this quark is Pbjorklund2, which gives an array of durations for euclidean rhythms.\n\n\nBatLib Quark\n\n\nBatLib contains StageLimiter, a class that puts a basic \nlimiter\n across all sounds in the SuperCollider server. StageLimiter doesn't really have any effect on the sound the server makes unless you exceed an amplitude of +/- 1 (the top and bottom of the default SuperCollider scope), and when you do push harder than that, you can use it creatively to get 'side-chaining' type effects. I'd recommend always running StageLimiter unless you have a specific reason not to anyway, as an amplitude value that is accidentally out by a factor of ten can be \nreally\n painful.\n\n\nddwSnippets Quark\n\n\nddwSnippets is a 'Rudimentary snippets facility for ScIDE, implemented in sclang'. I've found \nsnippets\n are very useful for any piece of text that will be typed multiple times during a performance, or to lay the groundwork for 'basic' musical patterns without having to write them from scratch (see my comments in 0-2 about SuperCollider's verbosity). I use ddwSnippets to realise musical ideas more quickly when performing, especially using Ugens or patterns that have a lot of arguments, without having to copy-paste from a 'template' file containing the snippets.\n\n\n\n\nHow to Install\n\n\nsc3-plugins and BenoitLib have to be installed manually.\na note for compiling sc3-plugins on Linux is that my /path/to/scsource is /usr/local/include/SuperCollider, and I would assume that would be a typical path for most users\nTo install all quarks listed in this document, execute the following in SuperCollider:\n\n\n(\nQuarks.install(\nBjorklund\n);\nQuarks.install(\nBatLib\n);\nQuarks.install(\nddwSnippets\n);\n)", 
            "title": "Recommended Addons"
        }, 
        {
            "location": "/2-1/#supercollider-addons-id-recommend", 
            "text": "TODO: Add link to harmonic series patterns and Pkr when done   Here is a list of Extensions and Quarks that are crucial to my live performances. If you want to be able to use all of the resources in this repo, you should install them.", 
            "title": "SuperCollider Addons I'd recommend"
        }, 
        {
            "location": "/2-1/#extensions", 
            "text": "Extensions have to be inserted into SuperCollider manually. See  this  document for more information. Note sc3-plugins have to be compiled on Linux. See the sc3-plugins readme on GitHub for more information.", 
            "title": "Extensions"
        }, 
        {
            "location": "/2-1/#sc3-plugins", 
            "text": "'This repository contains the community collection of unit generator plugins for SuperCollider. An installation extends the functionality of SuperCollider by additional UGens that run on scsynth, the SuperCollider audio synthesis server.'  sc3-plugins is a mixed bag of tools, and contains a lot of things I don't use, but it's pretty essential for getting the most out of SuperCollider. Some of the sc3-plugins are fairly scantily-documented, and fall into the 'sounds cool, but no idea what it does or how it works' category.  Particular tools from sc3-plugins I use regularly:    Concat  and  Concat2 \nTools for  concatenative synthesis . Particularly useful when dealing with speech and sampling - I've used them to 'reconstruct' speech using existing samples.    Decimator  and  SmoothDecimator  Bitcrushing  effect Ugens for that classic digital destruction sound. SmoothDecimator has a smoothing option to take some of the digital bite out of the bitcrushing sound.    SawDPW  (and  PulseDPW )\nAlternatives to SuperCollider's native  Saw  and  Pulse  Ugens, which alias much less, use less CPU and sound an awful lot better especially during additive synthesis. Can also get really wild at unusual frequencies.    DFM1 \nA really fantastic sounding digitally-modelled analog filter. Great both as a scuzzy-sounding filter on existing sounds and when pushed into self oscillation to make rich drones. Sounds good both in moderation and absurdity.    CrossoverDistortion \nA savage distortion. I don't really have a lot more to say about it.    WaveLoss \nAn effect for dropping sections of waveforms in either a deterministic or random fashion. Produces a 'degradation' effect from slight dropouts all the way to isolated spluttering.", 
            "title": "sc3-Plugins"
        }, 
        {
            "location": "/2-1/#benoitlib", 
            "text": "A set of SuperCollider extensions used by Beno\u00eet and the Mandelbrots.  The main tool I install this for is Pkr, a pattern proxy for synchronising control rate Ugens inside of patterns, which is a technique I will be covering in this repo. It's a small part of the extension but is totally invaluable for my performances.  There's also some super useful stuff in BenoitLib for collaborative performance which I have used before in a performance with  Shelly Knotts , including MandelHub and MandelClock", 
            "title": "BenoitLib"
        }, 
        {
            "location": "/2-1/#quarks", 
            "text": "Quarks can be installed from within SuperCollider, either by installing them manually ( Quarks.install('BatLib')  for example), or using  Quarks.gui  to bring up a gui install them there.", 
            "title": "Quarks"
        }, 
        {
            "location": "/2-1/#bjorklund-quark", 
            "text": "The Bjorklund quark implements Euclidean Rhythms, a concept outlined in  this paper , involving taking a number of onsets and a number of possible steps, and spaces out the onsets as equally as possible in the given number of steps. A verbal explanation of this doesn't really do it any justice, so I'd encourage you to use  this cool web app  which visually and aurally explains what these rhythms are. I've found Euclidean rhythms a great way to program rhythm that is dynamic and interesting, but also sits well within a set of metric dance music. The class I use from this quark is Pbjorklund2, which gives an array of durations for euclidean rhythms.", 
            "title": "Bjorklund Quark"
        }, 
        {
            "location": "/2-1/#batlib-quark", 
            "text": "BatLib contains StageLimiter, a class that puts a basic  limiter  across all sounds in the SuperCollider server. StageLimiter doesn't really have any effect on the sound the server makes unless you exceed an amplitude of +/- 1 (the top and bottom of the default SuperCollider scope), and when you do push harder than that, you can use it creatively to get 'side-chaining' type effects. I'd recommend always running StageLimiter unless you have a specific reason not to anyway, as an amplitude value that is accidentally out by a factor of ten can be  really  painful.", 
            "title": "BatLib Quark"
        }, 
        {
            "location": "/2-1/#ddwsnippets-quark", 
            "text": "ddwSnippets is a 'Rudimentary snippets facility for ScIDE, implemented in sclang'. I've found  snippets  are very useful for any piece of text that will be typed multiple times during a performance, or to lay the groundwork for 'basic' musical patterns without having to write them from scratch (see my comments in 0-2 about SuperCollider's verbosity). I use ddwSnippets to realise musical ideas more quickly when performing, especially using Ugens or patterns that have a lot of arguments, without having to copy-paste from a 'template' file containing the snippets.", 
            "title": "ddwSnippets Quark"
        }, 
        {
            "location": "/2-1/#how-to-install", 
            "text": "sc3-plugins and BenoitLib have to be installed manually.\na note for compiling sc3-plugins on Linux is that my /path/to/scsource is /usr/local/include/SuperCollider, and I would assume that would be a typical path for most users\nTo install all quarks listed in this document, execute the following in SuperCollider:  (\nQuarks.install( Bjorklund );\nQuarks.install( BatLib );\nQuarks.install( ddwSnippets );\n)", 
            "title": "How to Install"
        }, 
        {
            "location": "/2-2-1/", 
            "text": "ProxySpace - My Foundation for Live Coding in SuperCollider\n\n\n\n\nIf you haven't heard of or used it before, \nProxySpace\n and it's associated \nJITLib\n are \nwell\n worth knowing about, and are without exception what I use to live code in SuperCollider.\n\n\nAccording to the docs (see link above):\n\n\n\n\nGenerally a proxy is a placeholder for something. A node proxy is a placeholder for something playing on a server that writes to a limited number of busses (e.g. a synth or an event stream). NodeProxy objects can be replaced and recombined while they play. Also they can be used to build a larger structure which is used and modified later on.\n\n\n\n\nIn other words, ProxySpace opens up SuperCollider's language into a powerful performance tool by allowing individual functions/patterns/etc to become flexible and modifiable, as well as to make these patterns interact. When using ProxySpace, the traditional\n\n\n{SinOsc.ar(440,0,0.2)!2}.play\n\n\n\n\nis turned into an 'instrument' when given an arbitrary name and edited on the fly. It can also be used within other 'instruments', for example:\n\n\n(\n~sine1 = {SinOsc.ar(440,0,0.2)!2};\n~modulation = {Saw.ar(10,0,1)!2};\n~sine2 = {~sine1 * ~modulation};\n~sine2.play;\n)\n\n\n\n\nProxySpace can also be used for synchronising together \npatterns\n (including percussion, melodies, basses etc) in a quick and easy way, while allowing them to be edited and combined on-the-fly. Most of my live sets revolve around the creation (and destruction) of patterns, and ProxySpace makes this really quite easy. With ProxySpace I can build a performance using multiple self-managing 'instruments' and play them as I build them. By doing this I can think reasonably laterally about the performance, building up and packing down individual 'instruments' as I need them, while all of the existing 'instruments' continue playing. It also has some functionality such as automatic crossfading which is very useful for creating smooth performances.\n\n\nI've written two extended examples of how I use ProxySpace which are in this folder. They are musical examples that I would use in live performances I deliver. Open them up in your SuperCollider IDE and follow along.\n\n\nProxySpace (and JITLib in general) also have \ngreat\n documentation, which i'd recommend:\n\n\n\n\nProxySpace Examples\n\n\nThe \nJITLib Basic Concepts\n series\n\n\nJITLib Overview", 
            "title": "ProxySpace - Live Coding in SuperCollider"
        }, 
        {
            "location": "/2-2-1/#proxyspace-my-foundation-for-live-coding-in-supercollider", 
            "text": "If you haven't heard of or used it before,  ProxySpace  and it's associated  JITLib  are  well  worth knowing about, and are without exception what I use to live code in SuperCollider.  According to the docs (see link above):   Generally a proxy is a placeholder for something. A node proxy is a placeholder for something playing on a server that writes to a limited number of busses (e.g. a synth or an event stream). NodeProxy objects can be replaced and recombined while they play. Also they can be used to build a larger structure which is used and modified later on.   In other words, ProxySpace opens up SuperCollider's language into a powerful performance tool by allowing individual functions/patterns/etc to become flexible and modifiable, as well as to make these patterns interact. When using ProxySpace, the traditional  {SinOsc.ar(440,0,0.2)!2}.play  is turned into an 'instrument' when given an arbitrary name and edited on the fly. It can also be used within other 'instruments', for example:  (\n~sine1 = {SinOsc.ar(440,0,0.2)!2};\n~modulation = {Saw.ar(10,0,1)!2};\n~sine2 = {~sine1 * ~modulation};\n~sine2.play;\n)  ProxySpace can also be used for synchronising together  patterns  (including percussion, melodies, basses etc) in a quick and easy way, while allowing them to be edited and combined on-the-fly. Most of my live sets revolve around the creation (and destruction) of patterns, and ProxySpace makes this really quite easy. With ProxySpace I can build a performance using multiple self-managing 'instruments' and play them as I build them. By doing this I can think reasonably laterally about the performance, building up and packing down individual 'instruments' as I need them, while all of the existing 'instruments' continue playing. It also has some functionality such as automatic crossfading which is very useful for creating smooth performances.  I've written two extended examples of how I use ProxySpace which are in this folder. They are musical examples that I would use in live performances I deliver. Open them up in your SuperCollider IDE and follow along.  ProxySpace (and JITLib in general) also have  great  documentation, which i'd recommend:   ProxySpace Examples  The  JITLib Basic Concepts  series  JITLib Overview", 
            "title": "ProxySpace - My Foundation for Live Coding in SuperCollider"
        }, 
        {
            "location": "/2-3/", 
            "text": "Setup Code - Making Performance Easier\n\n\nTODO: Proofread This\n\n\n\n\nIn the root directory of this repo, there is a \nSetup\n folder, which contains some files, including \nSetup.scd\n, \nSynthDefs.scd\n and \nSnippets.scd\n. \n\n\nAs I mentioned in 'Why SuperCollider', one of my big gripes with SuperCollider and performing with it is the amount of pre-building that needs to be done in order to incorporate any higher level structures, such as playing samples, triggering instruments, and suchlike. This setup folder addresses that problem, and contains my personal SuperCollider performance setup, and can be loaded entirely by either running the \nSetup.scd\n file, or calling it from somewhere else (for example in line 14 of the \nsecond ProxySpace tutorial\n by specifying the relative filepath to the setup file and using the \n.loadRelative\n method on it. I can (and have) performed without this setup file, but for the most part I run this setup file before any performance I do.\n\n\nThe \nSetup.scd\n file does the following things:\n\n\n\n\nIncrease the number of buffers available for SuperCollider to load\n\n\nIncrease the amount of memory size available to the Server, to allow for more CPU-heavy work\n\n\nBoot the server\n Display the server Oscilloscope (Which I regularly use as visuals in my set)\n\n\nStart ProxySpace, and make a 60BPM proxy tempo clock\n\n\nLines 20-27:\n\n\nCreates a \nDictionary\n, \nd\n, to hold samples\n\n\nRecursively loads all samples of the correct set in the \nsamples\n folder. These samples are organised into folders which contain the samples. The name of the folder will be added as an entry to the dictionary, and the samples will be added as sub-entries. \n\n\nFor example, if you wanted to reference the second sample in the kick drum folder you would use \nd[\"k\"][1]\n (\nd\n for the dictionary, \n\"k\"\n as kickdrums are held in directory \nk\n, and \n1\n as you are referencing the second sample)\n\n\n\n\n\n\n\n\n\n\nLoads the \nSynthDefs.scd\n file, containing some custom SynthDefs which I use inside of patterns. Notably the necessary synthdef for playing samples \nbplay\n, and some instruments such as \nsinfb\n and \nring1\n.\n\n\nLoads the \nSnippets.scd\n file, which contains some snippets to be loaded into the \nddwSnippets Quark\n, for easy access during performance, which include basic percussion patterns, some functions and some patterns that have a lot of default arguments I might not remember while performing\n\n\nStarts \nStageLimiter\n from the BatLib quark, to protect everyone's ears\n\n\nPosts a message to show all the above have been completed\n\n\n\n\nOnce this setup file has been run, everything is set up to perform, all in one evaluation. The \n.loadRelative\ns in the Setup file also means if any SynthDefs or Snippets are added and saved, they will be loaded next time the setup file is loaded.\n\n\nIf you're following any examples/etc from this repo, and it doesn't work and I haven't said anything about the setup file, assume that you need to run it for the code to work!", 
            "title": "Setup Code: Making Performance Easier"
        }, 
        {
            "location": "/2-3/#setup-code-making-performance-easier", 
            "text": "TODO: Proofread This   In the root directory of this repo, there is a  Setup  folder, which contains some files, including  Setup.scd ,  SynthDefs.scd  and  Snippets.scd .   As I mentioned in 'Why SuperCollider', one of my big gripes with SuperCollider and performing with it is the amount of pre-building that needs to be done in order to incorporate any higher level structures, such as playing samples, triggering instruments, and suchlike. This setup folder addresses that problem, and contains my personal SuperCollider performance setup, and can be loaded entirely by either running the  Setup.scd  file, or calling it from somewhere else (for example in line 14 of the  second ProxySpace tutorial  by specifying the relative filepath to the setup file and using the  .loadRelative  method on it. I can (and have) performed without this setup file, but for the most part I run this setup file before any performance I do.  The  Setup.scd  file does the following things:   Increase the number of buffers available for SuperCollider to load  Increase the amount of memory size available to the Server, to allow for more CPU-heavy work  Boot the server\n Display the server Oscilloscope (Which I regularly use as visuals in my set)  Start ProxySpace, and make a 60BPM proxy tempo clock  Lines 20-27:  Creates a  Dictionary ,  d , to hold samples  Recursively loads all samples of the correct set in the  samples  folder. These samples are organised into folders which contain the samples. The name of the folder will be added as an entry to the dictionary, and the samples will be added as sub-entries.   For example, if you wanted to reference the second sample in the kick drum folder you would use  d[\"k\"][1]  ( d  for the dictionary,  \"k\"  as kickdrums are held in directory  k , and  1  as you are referencing the second sample)      Loads the  SynthDefs.scd  file, containing some custom SynthDefs which I use inside of patterns. Notably the necessary synthdef for playing samples  bplay , and some instruments such as  sinfb  and  ring1 .  Loads the  Snippets.scd  file, which contains some snippets to be loaded into the  ddwSnippets Quark , for easy access during performance, which include basic percussion patterns, some functions and some patterns that have a lot of default arguments I might not remember while performing  Starts  StageLimiter  from the BatLib quark, to protect everyone's ears  Posts a message to show all the above have been completed   Once this setup file has been run, everything is set up to perform, all in one evaluation. The  .loadRelative s in the Setup file also means if any SynthDefs or Snippets are added and saved, they will be loaded next time the setup file is loaded.  If you're following any examples/etc from this repo, and it doesn't work and I haven't said anything about the setup file, assume that you need to run it for the code to work!", 
            "title": "Setup Code - Making Performance Easier"
        }, 
        {
            "location": "/license/", 
            "text": "Creative Commons Legal Code\n\n\nAttribution-ShareAlike 3.0 Unported\n\n\nCREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE\nLEGAL SERVICES. DISTRIBUTION OF THIS LICENSE DOES NOT CREATE AN\nATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS\nINFORMATION ON AN \"AS-IS\" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES\nREGARDING THE INFORMATION PROVIDED, AND DISCLAIMS LIABILITY FOR\nDAMAGES RESULTING FROM ITS USE.\n\n\n\nLicense\n\n\nTHE WORK (AS DEFINED BELOW) IS PROVIDED UNDER THE TERMS OF THIS CREATIVE\nCOMMONS PUBLIC LICENSE (\"CCPL\" OR \"LICENSE\"). THE WORK IS PROTECTED BY\nCOPYRIGHT AND/OR OTHER APPLICABLE LAW. ANY USE OF THE WORK OTHER THAN AS\nAUTHORIZED UNDER THIS LICENSE OR COPYRIGHT LAW IS PROHIBITED.\n\n\nBY EXERCISING ANY RIGHTS TO THE WORK PROVIDED HERE, YOU ACCEPT AND AGREE\nTO BE BOUND BY THE TERMS OF THIS LICENSE. TO THE EXTENT THIS LICENSE MAY\nBE CONSIDERED TO BE A CONTRACT, THE LICENSOR GRANTS YOU THE RIGHTS\nCONTAINED HERE IN CONSIDERATION OF YOUR ACCEPTANCE OF SUCH TERMS AND\nCONDITIONS.\n\n\n\n\nDefinitions\n\n\n\n\na. \"Adaptation\" means a work based upon the Work, or upon the Work and\n    other pre-existing works, such as a translation, adaptation,\n    derivative work, arrangement of music or other alterations of a\n    literary or artistic work, or phonogram or performance and includes\n    cinematographic adaptations or any other form in which the Work may be\n    recast, transformed, or adapted including in any form recognizably\n    derived from the original, except that a work that constitutes a\n    Collection will not be considered an Adaptation for the purpose of\n    this License. For the avoidance of doubt, where the Work is a musical\n    work, performance or phonogram, the synchronization of the Work in\n    timed-relation with a moving image (\"synching\") will be considered an\n    Adaptation for the purpose of this License.\n b. \"Collection\" means a collection of literary or artistic works, such as\n    encyclopedias and anthologies, or performances, phonograms or\n    broadcasts, or other works or subject matter other than works listed\n    in Section 1(f) below, which, by reason of the selection and\n    arrangement of their contents, constitute intellectual creations, in\n    which the Work is included in its entirety in unmodified form along\n    with one or more other contributions, each constituting separate and\n    independent works in themselves, which together are assembled into a\n    collective whole. A work that constitutes a Collection will not be\n    considered an Adaptation (as defined below) for the purposes of this\n    License.\n c. \"Creative Commons Compatible License\" means a license that is listed\n    at https://creativecommons.org/compatiblelicenses that has been\n    approved by Creative Commons as being essentially equivalent to this\n    License, including, at a minimum, because that license: (i) contains\n    terms that have the same purpose, meaning and effect as the License\n    Elements of this License; and, (ii) explicitly permits the relicensing\n    of adaptations of works made available under that license under this\n    License or a Creative Commons jurisdiction license with the same\n    License Elements as this License.\n d. \"Distribute\" means to make available to the public the original and\n    copies of the Work or Adaptation, as appropriate, through sale or\n    other transfer of ownership.\n e. \"License Elements\" means the following high-level license attributes\n    as selected by Licensor and indicated in the title of this License:\n    Attribution, ShareAlike.\n f. \"Licensor\" means the individual, individuals, entity or entities that\n    offer(s) the Work under the terms of this License.\n g. \"Original Author\" means, in the case of a literary or artistic work,\n    the individual, individuals, entity or entities who created the Work\n    or if no individual or entity can be identified, the publisher; and in\n    addition (i) in the case of a performance the actors, singers,\n    musicians, dancers, and other persons who act, sing, deliver, declaim,\n    play in, interpret or otherwise perform literary or artistic works or\n    expressions of folklore; (ii) in the case of a phonogram the producer\n    being the person or legal entity who first fixes the sounds of a\n    performance or other sounds; and, (iii) in the case of broadcasts, the\n    organization that transmits the broadcast.\n h. \"Work\" means the literary and/or artistic work offered under the terms\n    of this License including without limitation any production in the\n    literary, scientific and artistic domain, whatever may be the mode or\n    form of its expression including digital form, such as a book,\n    pamphlet and other writing; a lecture, address, sermon or other work\n    of the same nature; a dramatic or dramatico-musical work; a\n    choreographic work or entertainment in dumb show; a musical\n    composition with or without words; a cinematographic work to which are\n    assimilated works expressed by a process analogous to cinematography;\n    a work of drawing, painting, architecture, sculpture, engraving or\n    lithography; a photographic work to which are assimilated works\n    expressed by a process analogous to photography; a work of applied\n    art; an illustration, map, plan, sketch or three-dimensional work\n    relative to geography, topography, architecture or science; a\n    performance; a broadcast; a phonogram; a compilation of data to the\n    extent it is protected as a copyrightable work; or a work performed by\n    a variety or circus performer to the extent it is not otherwise\n    considered a literary or artistic work.\n i. \"You\" means an individual or entity exercising rights under this\n    License who has not previously violated the terms of this License with\n    respect to the Work, or who has received express permission from the\n    Licensor to exercise rights under this License despite a previous\n    violation.\n j. \"Publicly Perform\" means to perform public recitations of the Work and\n    to communicate to the public those public recitations, by any means or\n    process, including by wire or wireless means or public digital\n    performances; to make available to the public Works in such a way that\n    members of the public may access these Works from a place and at a\n    place individually chosen by them; to perform the Work to the public\n    by any means or process and the communication to the public of the\n    performances of the Work, including by public digital performance; to\n    broadcast and rebroadcast the Work by any means including signs,\n    sounds or images.\n k. \"Reproduce\" means to make copies of the Work by any means including\n    without limitation by sound or visual recordings and the right of\n    fixation and reproducing fixations of the Work, including storage of a\n    protected performance or phonogram in digital form or other electronic\n    medium.\n\n\n\n\n\n\nFair Dealing Rights. Nothing in this License is intended to reduce,\nlimit, or restrict any uses free from copyright or rights arising from\nlimitations or exceptions that are provided for in connection with the\ncopyright protection under copyright law or other applicable laws.\n\n\n\n\n\n\nLicense Grant. Subject to the terms and conditions of this License,\nLicensor hereby grants You a worldwide, royalty-free, non-exclusive,\nperpetual (for the duration of the applicable copyright) license to\nexercise the rights in the Work as stated below:\n\n\n\n\n\n\na. to Reproduce the Work, to incorporate the Work into one or more\n    Collections, and to Reproduce the Work as incorporated in the\n    Collections;\n b. to create and Reproduce Adaptations provided that any such Adaptation,\n    including any translation in any medium, takes reasonable steps to\n    clearly label, demarcate or otherwise identify that changes were made\n    to the original Work. For example, a translation could be marked \"The\n    original work was translated from English to Spanish,\" or a\n    modification could indicate \"The original work has been modified.\";\n c. to Distribute and Publicly Perform the Work including as incorporated\n    in Collections; and,\n d. to Distribute and Publicly Perform Adaptations.\n e. For the avoidance of doubt:\n\n\n i. Non-waivable Compulsory License Schemes. In those jurisdictions in\n    which the right to collect royalties through any statutory or\n    compulsory licensing scheme cannot be waived, the Licensor\n    reserves the exclusive right to collect such royalties for any\n    exercise by You of the rights granted under this License;\nii. Waivable Compulsory License Schemes. In those jurisdictions in\n    which the right to collect royalties through any statutory or\n    compulsory licensing scheme can be waived, the Licensor waives the\n    exclusive right to collect such royalties for any exercise by You\n    of the rights granted under this License; and,\n\n\n\niii. Voluntary License Schemes. The Licensor waives the right to\n        collect royalties, whether individually or, in the event that the\n        Licensor is a member of a collecting society that administers\n        voluntary licensing schemes, via that society, from any exercise\n        by You of the rights granted under this License.\n\n\nThe above rights may be exercised in all media and formats whether now\nknown or hereafter devised. The above rights include the right to make\nsuch modifications as are technically necessary to exercise the rights in\nother media and formats. Subject to Section 8(f), all rights not expressly\ngranted by Licensor are hereby reserved.\n\n\n\n\nRestrictions. The license granted in Section 3 above is expressly made\nsubject to and limited by the following restrictions:\n\n\n\n\na. You may Distribute or Publicly Perform the Work only under the terms\n    of this License. You must include a copy of, or the Uniform Resource\n    Identifier (URI) for, this License with every copy of the Work You\n    Distribute or Publicly Perform. You may not offer or impose any terms\n    on the Work that restrict the terms of this License or the ability of\n    the recipient of the Work to exercise the rights granted to that\n    recipient under the terms of the License. You may not sublicense the\n    Work. You must keep intact all notices that refer to this License and\n    to the disclaimer of warranties with every copy of the Work You\n    Distribute or Publicly Perform. When You Distribute or Publicly\n    Perform the Work, You may not impose any effective technological\n    measures on the Work that restrict the ability of a recipient of the\n    Work from You to exercise the rights granted to that recipient under\n    the terms of the License. This Section 4(a) applies to the Work as\n    incorporated in a Collection, but this does not require the Collection\n    apart from the Work itself to be made subject to the terms of this\n    License. If You create a Collection, upon notice from any Licensor You\n    must, to the extent practicable, remove from the Collection any credit\n    as required by Section 4(c), as requested. If You create an\n    Adaptation, upon notice from any Licensor You must, to the extent\n    practicable, remove from the Adaptation any credit as required by\n    Section 4(c), as requested.\n b. You may Distribute or Publicly Perform an Adaptation only under the\n    terms of: (i) this License; (ii) a later version of this License with\n    the same License Elements as this License; (iii) a Creative Commons\n    jurisdiction license (either this or a later license version) that\n    contains the same License Elements as this License (e.g.,\n    Attribution-ShareAlike 3.0 US)); (iv) a Creative Commons Compatible\n    License. If you license the Adaptation under one of the licenses\n    mentioned in (iv), you must comply with the terms of that license. If\n    you license the Adaptation under the terms of any of the licenses\n    mentioned in (i), (ii) or (iii) (the \"Applicable License\"), you must\n    comply with the terms of the Applicable License generally and the\n    following provisions: (I) You must include a copy of, or the URI for,\n    the Applicable License with every copy of each Adaptation You\n    Distribute or Publicly Perform; (II) You may not offer or impose any\n    terms on the Adaptation that restrict the terms of the Applicable\n    License or the ability of the recipient of the Adaptation to exercise\n    the rights granted to that recipient under the terms of the Applicable\n    License; (III) You must keep intact all notices that refer to the\n    Applicable License and to the disclaimer of warranties with every copy\n    of the Work as included in the Adaptation You Distribute or Publicly\n    Perform; (IV) when You Distribute or Publicly Perform the Adaptation,\n    You may not impose any effective technological measures on the\n    Adaptation that restrict the ability of a recipient of the Adaptation\n    from You to exercise the rights granted to that recipient under the\n    terms of the Applicable License. This Section 4(b) applies to the\n    Adaptation as incorporated in a Collection, but this does not require\n    the Collection apart from the Adaptation itself to be made subject to\n    the terms of the Applicable License.\n c. If You Distribute, or Publicly Perform the Work or any Adaptations or\n    Collections, You must, unless a request has been made pursuant to\n    Section 4(a), keep intact all copyright notices for the Work and\n    provide, reasonable to the medium or means You are utilizing: (i) the\n    name of the Original Author (or pseudonym, if applicable) if supplied,\n    and/or if the Original Author and/or Licensor designate another party\n    or parties (e.g., a sponsor institute, publishing entity, journal) for\n    attribution (\"Attribution Parties\") in Licensor's copyright notice,\n    terms of service or by other reasonable means, the name of such party\n    or parties; (ii) the title of the Work if supplied; (iii) to the\n    extent reasonably practicable, the URI, if any, that Licensor\n    specifies to be associated with the Work, unless such URI does not\n    refer to the copyright notice or licensing information for the Work;\n    and (iv) , consistent with Ssection 3(b), in the case of an\n    Adaptation, a credit identifying the use of the Work in the Adaptation\n    (e.g., \"French translation of the Work by Original Author,\" or\n    \"Screenplay based on original Work by Original Author\"). The credit\n    required by this Section 4(c) may be implemented in any reasonable\n    manner; provided, however, that in the case of a Adaptation or\n    Collection, at a minimum such credit will appear, if a credit for all\n    contributing authors of the Adaptation or Collection appears, then as\n    part of these credits and in a manner at least as prominent as the\n    credits for the other contributing authors. For the avoidance of\n    doubt, You may only use the credit required by this Section for the\n    purpose of attribution in the manner set out above and, by exercising\n    Your rights under this License, You may not implicitly or explicitly\n    assert or imply any connection with, sponsorship or endorsement by the\n    Original Author, Licensor and/or Attribution Parties, as appropriate,\n    of You or Your use of the Work, without the separate, express prior\n    written permission of the Original Author, Licensor and/or Attribution\n    Parties.\n d. Except as otherwise agreed in writing by the Licensor or as may be\n    otherwise permitted by applicable law, if You Reproduce, Distribute or\n    Publicly Perform the Work either by itself or as part of any\n    Adaptations or Collections, You must not distort, mutilate, modify or\n    take other derogatory action in relation to the Work which would be\n    prejudicial to the Original Author's honor or reputation. Licensor\n    agrees that in those jurisdictions (e.g. Japan), in which any exercise\n    of the right granted in Section 3(b) of this License (the right to\n    make Adaptations) would be deemed to be a distortion, mutilation,\n    modification or other derogatory action prejudicial to the Original\n    Author's honor and reputation, the Licensor will waive or not assert,\n    as appropriate, this Section, to the fullest extent permitted by the\n    applicable national law, to enable You to reasonably exercise Your\n    right under Section 3(b) of this License (right to make Adaptations)\n    but not otherwise.\n\n\n\n\nRepresentations, Warranties and Disclaimer\n\n\n\n\nUNLESS OTHERWISE MUTUALLY AGREED TO BY THE PARTIES IN WRITING, LICENSOR\nOFFERS THE WORK AS-IS AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY\nKIND CONCERNING THE WORK, EXPRESS, IMPLIED, STATUTORY OR OTHERWISE,\nINCLUDING, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTIBILITY,\nFITNESS FOR A PARTICULAR PURPOSE, NONINFRINGEMENT, OR THE ABSENCE OF\nLATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OF ABSENCE OF ERRORS,\nWHETHER OR NOT DISCOVERABLE. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION\nOF IMPLIED WARRANTIES, SO SUCH EXCLUSION MAY NOT APPLY TO YOU.\n\n\n\n\n\n\nLimitation on Liability. EXCEPT TO THE EXTENT REQUIRED BY APPLICABLE\nLAW, IN NO EVENT WILL LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY FOR\nANY SPECIAL, INCIDENTAL, CONSEQUENTIAL, PUNITIVE OR EXEMPLARY DAMAGES\nARISING OUT OF THIS LICENSE OR THE USE OF THE WORK, EVEN IF LICENSOR HAS\nBEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\n\n\n\n\n\nTermination\n\n\n\n\n\n\na. This License and the rights granted hereunder will terminate\n    automatically upon any breach by You of the terms of this License.\n    Individuals or entities who have received Adaptations or Collections\n    from You under this License, however, will not have their licenses\n    terminated provided such individuals or entities remain in full\n    compliance with those licenses. Sections 1, 2, 5, 6, 7, and 8 will\n    survive any termination of this License.\n b. Subject to the above terms and conditions, the license granted here is\n    perpetual (for the duration of the applicable copyright in the Work).\n    Notwithstanding the above, Licensor reserves the right to release the\n    Work under different license terms or to stop distributing the Work at\n    any time; provided, however that any such election will not serve to\n    withdraw this License (or any other license that has been, or is\n    required to be, granted under the terms of this License), and this\n    License will continue in full force and effect unless terminated as\n    stated above.\n\n\n\n\nMiscellaneous\n\n\n\n\na. Each time You Distribute or Publicly Perform the Work or a Collection,\n    the Licensor offers to the recipient a license to the Work on the same\n    terms and conditions as the license granted to You under this License.\n b. Each time You Distribute or Publicly Perform an Adaptation, Licensor\n    offers to the recipient a license to the original Work on the same\n    terms and conditions as the license granted to You under this License.\n c. If any provision of this License is invalid or unenforceable under\n    applicable law, it shall not affect the validity or enforceability of\n    the remainder of the terms of this License, and without further action\n    by the parties to this agreement, such provision shall be reformed to\n    the minimum extent necessary to make such provision valid and\n    enforceable.\n d. No term or provision of this License shall be deemed waived and no\n    breach consented to unless such waiver or consent shall be in writing\n    and signed by the party to be charged with such waiver or consent.\n e. This License constitutes the entire agreement between the parties with\n    respect to the Work licensed here. There are no understandings,\n    agreements or representations with respect to the Work not specified\n    here. Licensor shall not be bound by any additional provisions that\n    may appear in any communication from You. This License may not be\n    modified without the mutual written agreement of the Licensor and You.\n f. The rights granted under, and the subject matter referenced, in this\n    License were drafted utilizing the terminology of the Berne Convention\n    for the Protection of Literary and Artistic Works (as amended on\n    September 28, 1979), the Rome Convention of 1961, the WIPO Copyright\n    Treaty of 1996, the WIPO Performances and Phonograms Treaty of 1996\n    and the Universal Copyright Convention (as revised on July 24, 1971).\n    These rights and subject matter take effect in the relevant\n    jurisdiction in which the License terms are sought to be enforced\n    according to the corresponding provisions of the implementation of\n    those treaty provisions in the applicable national law. If the\n    standard suite of rights granted under applicable copyright law\n    includes additional rights not granted under this License, such\n    additional rights are deemed to be included in the License; this\n    License is not intended to restrict the license of any rights under\n    applicable law.\n\n\nCreative Commons Notice\n\n\nCreative Commons is not a party to this License, and makes no warranty\nwhatsoever in connection with the Work. Creative Commons will not be\nliable to You or any party on any legal theory for any damages\nwhatsoever, including without limitation any general, special,\nincidental or consequential damages arising in connection to this\nlicense. Notwithstanding the foregoing two (2) sentences, if Creative\nCommons has expressly identified itself as the Licensor hereunder, it\nshall have all rights and obligations of Licensor.\n\nExcept for the limited purpose of indicating to the public that the\nWork is licensed under the CCPL, Creative Commons does not authorize\nthe use by either party of the trademark \"Creative Commons\" or any\nrelated trademark or logo of Creative Commons without the prior\nwritten consent of Creative Commons. Any permitted use will be in\ncompliance with Creative Commons' then-current trademark usage\nguidelines, as may be published on its website or otherwise made\navailable upon request from time to time. For the avoidance of doubt,\nthis trademark restriction does not form part of the License.\n\nCreative Commons may be contacted at https://creativecommons.org/.", 
            "title": "License"
        }
    ]
}